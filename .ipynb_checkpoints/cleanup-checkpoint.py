{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "import sys\n",
    "import glob\n",
    "import logging\n",
    "\n",
    "def check(root, filterGifs = True, filterDuplicates = True, filterCorrupts = True):\n",
    "    from collections import defaultdict\n",
    "    from PIL import Image\n",
    "    import os\n",
    "    import imagehash\n",
    "    import cv2\n",
    "\n",
    "    logging.debug(\"check {}\".format(str(root)))\n",
    "    for item in os.listdir(root):\n",
    "        obj = os.path.join(root, item)\n",
    "        if os.path.isdir(obj):\n",
    "            check(obj)\n",
    "\n",
    "    hashtable = defaultdict(lambda: defaultdict(dict))\n",
    "    pre_am = len(glob.glob(root + \"/*.*\"))\n",
    "    for imagePath in glob.glob(root + \"/*.*\"):\n",
    "        if os.path.isfile(imagePath):\n",
    "            # Filter GIFs\n",
    "            if(filterGifs): \n",
    "                logging.debug(\"filter gifs\")\n",
    "                import re\n",
    "                if imagePath.endswith(\".gif\"):\n",
    "                    try:\n",
    "                        logging.debug(\"gif file: {}\".format(imagePath))\n",
    "                        os.remove(imagePath)\n",
    "                    except:\n",
    "                        pass\n",
    "                    continue\n",
    "\n",
    "\n",
    "            # Filter duplicates\n",
    "            if(filterDuplicates):\n",
    "                logging.debug(\"filter duplicates\")\n",
    "                try:\n",
    "                    image = Image.open(imagePath)\n",
    "                    logging.info(imagePath)\n",
    "                    h = str(imagehash.dhash(image))\n",
    "                    if (not hashtable[h]):\n",
    "                        hashtable[h] = imagePath\n",
    "                    else:\n",
    "                        logging.debug(\"collision: {} {}\".format(imagePath, hashtable[h]))\n",
    "                        os.remove(imagePath)\n",
    "                        continue\n",
    "                except:\n",
    "                    logging.debug(\"unreadable file: {}\".format(imagePath))\n",
    "                    try:\n",
    "                        os.remove(imagePath)\n",
    "                    except:\n",
    "                        pass\n",
    "                    continue\n",
    "\n",
    "            # Check corrupt files\n",
    "            # this approach is stupid but it makes sure that all \n",
    "            # common imaging libraries can read this file.\n",
    "            if(filterCorrupts):\n",
    "                logging.debug(\"filter corrupts\")\n",
    "                try:\n",
    "                    image = Image.open(imagePath) # Open image in PIL usually already crashes for corrupt ones\n",
    "                    imagehash.dhash(image) # Do something\n",
    "\n",
    "                    image = cv2.imread(imagePath) # Or maybe OpenCV doesn't like it                  \n",
    "                    cv2.resize(image, (1234, 1234)) # Do something\n",
    "\n",
    "                    # by now something should have crashed if the file isn't processable!\n",
    "                except:\n",
    "                    logging.debug(\"unreadable file: {}\".format(imagePath))\n",
    "                    try:\n",
    "                        os.remove(imagePath)\n",
    "                    except:\n",
    "                        pass\n",
    "                    continue\n",
    "\n",
    "    post_am = len(glob.glob(root + \"/*.*\"))\n",
    "    logging.info(\"deleted {} files for {}\".format(pre_am - post_am, str(root)))\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    dirname=[]\n",
    "    for i in glob.glob(\"*\"):\n",
    "        if \".\" not in i:\n",
    "            dirname.append(i)\n",
    "\n",
    "    print(dirname)\n",
    "\n",
    "    #dirname=[\"白石麻衣\",\"齋藤飛鳥\",\"生田絵梨花\"]#<-人名を指定する場合\n",
    "\n",
    "    for name in dirname:\n",
    "        prefix = name+\"/\"\n",
    "        logging.basicConfig(\n",
    "            format='[%(asctime)s %(levelname)s] %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p', level=logging.DEBUG)\n",
    "\n",
    "        check(prefix, filterGifs=False, filterDuplicates=False, filterCorrupts=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
